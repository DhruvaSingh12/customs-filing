datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/// Existing
model User {
  id           String      @id @default(uuid())
  name         String?
  gstin        String      @unique @db.Char(15)
  email        String?     @unique
  phone        String?     @unique
  role         Role        @default(user)
  passwordHash String?     
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // NextAuth relations
  accounts     Account[]
  sessions     Session[]

  // domain data
  filings      Filing[]    @relation("UserFilings")
}

enum Role {
  user
  admin
}

/// NextAuth models
model Account {
  id                String   @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? 
  access_token      String? 
  expires_at        Int?     
  token_type        String?  
  scope             String?  
  id_token          String?  
  session_state     String?  

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/// domain models
model Filing {
  id                  String        @id @default(uuid())
  shipment_id         String
  invoice_no          String        @unique
  invoice_date        DateTime
  port_code           String
  exporter_gstin      String?       @db.Char(15)
  import_export_flag  String        @db.Char(1)
  total_invoice_value Decimal       @db.Decimal(14, 2)
  currency_code       String        @db.Char(3)
  submission_date     DateTime?
  status              FilingStatus  @default(draft)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt @default(now())
  createdBy           User?         @relation("UserFilings", fields: [createdById], references: [id])
  createdById         String?
  items               FilingItem[]

  @@index([createdById])
  @@index([shipment_id])
}


model FilingItem {
  id                   String   @id @default(uuid())
  filing               Filing   @relation(fields: [filingId], references: [id], onDelete: Cascade)
  filingId             String
  item_id              String?
  commodity_desc       String   @db.VarChar(200)
  hs_code              String   @db.VarChar(10)
  quantity             Decimal  @db.Decimal(12, 2)
  unit_code            String   @db.VarChar(4)
  unit_price           Decimal  @db.Decimal(14, 2)
  line_item_value      Decimal  @db.Decimal(14, 2)
  origin_country_code  String   @db.Char(2)
  net_mass             Decimal? @db.Decimal(12, 3)
  gross_mass           Decimal? @db.Decimal(12, 3)
  createdAt            DateTime @default(now())

  @@index([filingId])
}

enum FilingStatus {
  draft
  submitted
  error
}
